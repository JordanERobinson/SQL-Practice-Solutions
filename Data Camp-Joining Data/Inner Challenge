Challenge Prompt

The table you created with the added geosize_group field has been loaded for you here with the name countries_plus. 
Observe the use of (and the placement of) the INTO command to create this countries_plus table:

SELECT name, continent, code, surface_area,
    CASE WHEN surface_area > 2000000
            THEN 'large'
       WHEN surface_area > 350000
            THEN 'medium'
       ELSE 'small' END
       AS geosize_group
INTO countries_plus
FROM countries;

You will now explore the relationship between the size of a country in terms of surface area and in terms of population using 
grouping fields created with CASE.

By the end of this exercise, you'll be writing two queries back-to-back in a single script. You got this!

Part 1

Using the populations table focused only for the year 2015, create a new field aliased as popsize_group to organize population size into

    'large' (> 50 million),
    'medium' (> 1 million), and
    'small' groups.

Select only the country code, population size, and this new popsize_group as fields.

Solution

~~

SELECT country_code, size,
    -- First case
    CASE WHEN size > 50000000 THEN 'large'
        -- Second case
        WHEN size > 1000000 THEN 'medium'
        -- Else clause + end
        ELSE 'small' END
        -- Alias name (popsize_group)
        AS popsize_group
-- From table
FROM populations
-- Focus on 2015
WHERE year = 2015;

~~

Part 2



    Use INTO to save the result of the previous query as pop_plus. 
    You can see an example of this in the countries_plus code in the assignment text. 
    Make sure to include a ; at the end of your WHERE clause!

    Then, include another query below your first query to display all the records in pop_plus using SELECT * FROM pop_plus; 
    so that you generate results and this will display pop_plus in the query result.

Solution

~~

SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
-- Into table
INTO pop_plus
FROM populations AS p 
WHERE p.year = 2015;

-- Select all columns of pop_plus
SELECT *
FROM pop_plus;
~~


Part 3


    Keep the first query intact that creates pop_plus using INTO.
    Write a query to join countries_plus AS c on the left with pop_plus AS p on the right matching on the country code fields.
    Sort the data based on geosize_group, in ascending order so that large appears on top.
    Select the name, continent, geosize_group, and popsize_group fields.

Solution
~~

SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;

-- Select fields
SELECT c.name, c.continent, c.geosize_group, p.popsize_group
-- From countries_plus (alias as c)
FROM countries_plus AS c
  -- Join to pop_plus (alias as p)
  INNER JOIN pop_plus AS p
    -- Match on country code
    ON c.code = p.country_code
-- Order the table    
ORDER BY geosize_group ASC;
~~
